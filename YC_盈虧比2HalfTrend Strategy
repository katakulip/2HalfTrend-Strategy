//@version=5
//盈虧比2
strategy('YC_盈虧比2HalfTrend Strategy', overlay=true, initial_capital=1000)

// 选择报警类型，默认为 PineConnector 也可以选择 Telegram
tlpc = input.string(title="Alert", defval="PineConnector", options=["PineConnector", "Telegram"], tooltip="Go to alertatron to have alerts automatically sent to Telegram")

 
// 设置
// ID: PineConnector 的许可证 ID
ID = input("1234567890123", title="License ID (PineConnector)", group="Setting")
// risk: 每次交易的风险百分比
risk = input.float(2, title="Risk per Trade %", group="Setting", step=0.5)
// typeSL: 止损类型ATR 或 Swing
typeSL = input.string(title="StopLoss", defval="ATR", options=["Swing", "ATR"], group="Setting")
// typeTP: 止盈类型R:R 或 Multiple Target
typeTP = input.string(title="TakeProfit", defval="R:R", options=["R:R", "Multiple Target"], group="Setting")
// trendA: 趋势指标EMA 或 Superichi
trendA = input.string(title="Trend Indicator", defval="EMA", options=["EMA", "Superichi"], group="Setting")
// _x: 是否避免太小的仓位，用于避免进场点靠近止损点，使经纪人的点差吃掉所有收益
_x = input.bool(false, title="do not take too small positions", group="Setting", tooltip="This parameter is used to avoid positions that have a stoploss too close to the entry point and that the broker's spreads take all the gains")
// security: 最小点数（以 pips 为单位）
security = input.float(10, title="min of pips (00001.00)", group="Setting")

// 计算风险倍数
riskt = risk / 100 + 1

//Backtest Time Period
// 回测时间范围
// useDateFilter: 是否对回测时间范围进行筛选
useDateFilter = input.bool(false, title="Filter Date Range of Backtest", group="Backtest Time Period")
// backtestStartDate: 回测开始日期
backtestStartDate = input.time(timestamp("1 June 2022"), title="Start Date", group="Backtest Time Period", tooltip="This start date is in the time zone of the exchange " + "where the chart's instrument trades. It doesn't use the time " + "zone of the chart or of your computer.")
// backtestEndDate: 回测结束日期
backtestEndDate = input.time(timestamp("1 July 2022"), title="End Date", group="Backtest Time Period", tooltip="This end date is in the time zone of the exchange " + "where the chart's instrument trades. It doesn't use the time " + "zone of the chart or of your computer.")
// inTradeWindow: 是否在回测时间范围内
inTradeWindow = not useDateFilter or (time >= backtestStartDate and time < backtestEndDate)

//backtestStartDate = input.time(timestamp("12 July 2022"), title="Start Date", group="Backtest Time Period", tooltip="This start date is in the time zone of the exchange " + "where the chart's instrument trades. It doesn't use the time " + "zone of the chart or of your computer.")
//backtestEndDate = input.time(timestamp("15 November 2022"), title="End Date", group="Backtest Time Period", tooltip="This end date is in the time zone of the exchange " + "where the chart's instrument trades. It doesn't use the time " + "zone of the chart or of your computer.")

//inTradeWindow =  useDateFilter or (time >= backtestStartDate and time < backtestEndDate)


//StopLoss

swingHighV = input.int(7, title="Swing High", group="Stop Loss", tooltip="Number of candles in which the parameter targets the highest")
swingLowV = input.int(7, title="Swing Low", group="Stop Loss", tooltip="Number of candles in which the parameter targets the lowest point")

atr1 = input.int(14, title="ATR Period", group="Stop Loss")
atrMultiplierSL = input.int(2, title = "ATR Multiplier", group="Stop Loss")

atr = ta.atr(atr1)

swingHigh = ta.highest(high, swingHighV)
swingLow = ta.lowest(low, swingLowV)

atrSell = close + atr * atrMultiplierSL
atrBuy = close - atr * atrMultiplierSL

//TakeProfit
//************************************************************************更改盈虧比defval
target_stop_ratio = input.float(title='Risk/Reward (R:R)', defval=2, minval=0.5, maxval=100, step=0.1, group="TakeProfit")
target1 = input.float(1, title='Target 1 R:R (Multiple Target)', group="TakeProfit", step=0.1)
target2 = input.float(2, title='Target 2 R:R (Multiple Target)', group="TakeProfit", step=0.1)

//HalfTrend
//分別為 “振幅”、“頻道偏差”、“顯示箭頭” 和  “顯示頻道”並設定預設值。這些參數可以被用來控制圖表的外觀和行為。
amplitude = input(title='Amplitude', defval=2, group="HalfTrend")
channelDeviation = input(title='Channel Deviation', defval=2, group="HalfTrend")
showArrows = input(title='Show Arrows', defval=true, group="HalfTrend")
showChannels = input(title='Show Channels', defval=true, group="HalfTrend")

//它初始化了一些整數和浮點數變量，並計算了一些數值，例如移動平均數 (SMA) 和平均真實波幅 (ATR)。
//它計算了一些價格值，例如高價、低價、高價移動平均數和低價移動平均數，並用這些值計算了一些數值，例如 atr2 和 dev。
//這段代碼還沒有完全定義，因此不能完全確定它的功能和意義。它需要更多的代碼來完整地定義它的行為和輸出。
var int trend = 0
var int nextTrend = 0
var float maxLowPrice = nz(low[1], low)
var float minHighPrice = nz(high[1], high)

var float up = 0.0
var float down = 0.0
float atrHigh = 0.0
float atrLow = 0.0
float arrowUp = na
float arrowDown = na

atr2 = ta.atr(100) / 2
dev = channelDeviation * atr2

highPrice = high[math.abs(ta.highestbars(amplitude))]
lowPrice = low[math.abs(ta.lowestbars(amplitude))]
highma = ta.sma(high, amplitude)
lowma = ta.sma(low, amplitude)

if nextTrend == 1
    maxLowPrice := math.max(lowPrice, maxLowPrice)

    if highma < maxLowPrice and close < nz(low[1], low)
        trend := 1
        nextTrend := 0
        minHighPrice := highPrice
        minHighPrice
else
    minHighPrice := math.min(highPrice, minHighPrice)

    if lowma > minHighPrice and close > nz(high[1], high)
        trend := 0
        nextTrend := 1
        maxLowPrice := lowPrice
        maxLowPrice

if trend == 0
    if not na(trend[1]) and trend[1] != 0
        up := na(down[1]) ? down : down[1]
        arrowUp := up - atr2
        arrowUp
    else
        up := na(up[1]) ? maxLowPrice : math.max(maxLowPrice, up[1])
        up
    atrHigh := up + dev
    atrLow := up - dev
    atrLow
else
    if not na(trend[1]) and trend[1] != 1
        down := na(up[1]) ? up : up[1]
        arrowDown := down + atr2
        arrowDown
    else
        down := na(down[1]) ? minHighPrice : math.min(minHighPrice, down[1])
        down
    atrHigh := down + dev
    atrLow := down - dev
    atrLow

ht = trend == 0 ? up : down

var color buyColor = color.blue
var color sellColor = color.orange

htColor = trend == 0 ? buyColor : sellColor
htPlot = plot(ht, title='HalfTrend', linewidth=2, color=htColor)

buySignal = not na(arrowUp) and trend == 0 and trend[1] == 1
sellSignal = not na(arrowDown) and trend == 1 and trend[1] == 0

//EMA

srce = input.source(close, title="Source", group="EMA (Trend)")
emav = input.int(200, title="Length", group="EMA (Trend)")

ema = ta.ema(srce, emav)

//Superichi

tenkan_len  = input(9,'Tenkan',inline='tenkan', group="Superichi (Trend)")
tenkan_mult = input(2.,'',inline='tenkan', group="Superichi (Trend)")

kijun_len   = input(26,'Kijun',inline='kijun', group="Superichi (Trend)")
kijun_mult  = input(4,'',inline='kijun', group="Superichi (Trend)")

spanB_len   = input(52,'Senkou Span B',inline='span', group="Superichi (Trend)")
spanB_mult  = input(6, '', inline='span', group="Superichi (Trend)")

offset      = input(26,'Displacement', group="Superichi (Trend)")

avg(src,length,mult)=>
    atr = ta.atr(length)*mult
    up = hl2 + atr
    dn = hl2 - atr
    upper = 0.,lower = 0.
    upper := src[1] < upper[1] ? math.min(up,upper[1]) : up
    lower := src[1] > lower[1] ? math.max(dn,lower[1]) : dn
    
    os = 0,max = 0.,min = 0.
    os := src > upper ? 1 : src < lower ? 0 : os[1]
    spt = os == 1 ? lower : upper
    max := ta.cross(src,spt) ? math.max(src,max[1]) : os == 1 ? math.max(src,max[1]) : spt
    min := ta.cross(src,spt) ? math.min(src,min[1]) : os == 0 ? math.min(src,min[1]) : spt
    math.avg(max,min)

tenkan = avg(close,tenkan_len,tenkan_mult)
kijun = avg(close,kijun_len,kijun_mult)

senkouA = math.avg(kijun,tenkan)
senkouB = avg(close,spanB_len,spanB_mult)

tenkan_css = #2157f3
kijun_css = #ff5d00

cloud_a = color.new(color.teal,50)
cloud_b = color.new(color.red,50)

//Alert



mess_buyT = "📈  𝗔𝗖𝗛𝗔𝗧  🔵  " + str.tostring(syminfo.ticker) + "\n \n" + "Prix d'entrée  " + str.tostring(close) + "\n" + "SL  " + str.tostring(swingLow) + " ⛔️ \n" + "TP  " + str.tostring(((close-swingLow)*target_stop_ratio)+close) + " 🎯 \n \n" + "⚠️ Avertissement : Respectez votre money management, risquez seulement " + str.tostring(risk) + "% de votre capital sur ce trade."
mess_sellT = "📉  𝗩𝗘𝗡𝗧𝗘  🔴  " + str.tostring(syminfo.ticker) + "\n \n" + "Prix d'entrée  " + str.tostring(close) + "\n" + "SL  " + str.tostring(swingHigh) + " ⛔️ \n" + "TP  " + str.tostring(close-((swingHigh-close)*target_stop_ratio)) + " 🎯 \n \n" + "⚠️ Avertissement : Respectez votre money management, risquez seulement " + str.tostring(risk) + "% de votre capital sur ce trade."

mess_buyP = "" + str.tostring(ID) + ",buy," + str.tostring(syminfo.ticker) + ",sl=" + str.tostring(swingLow) + ",tp=" + str.tostring(((close-swingLow)*target_stop_ratio)+close) + ",risk=" + str.tostring(risk) + ""
mess_sellP = "" + str.tostring(ID) + ",sell," + str.tostring(syminfo.ticker) + ",sl=" + str.tostring(swingHigh) + ",tp=" + str.tostring(close-((swingHigh-close)*target_stop_ratio)) + ",risk=" + str.tostring(risk) + ""

mess_buyAT = "📈  𝗔𝗖𝗛𝗔𝗧  🔵  " + str.tostring(syminfo.ticker) + "\n \n" + "Prix d'entrée  " + str.tostring(close) + "\n" + "SL  " + str.tostring(atrBuy) + " ⛔️ \n" + "TP  " + str.tostring(((close-atrBuy)*target_stop_ratio)+close) + " 🎯 \n \n" + "⚠️ Avertissement : Respectez votre money management, risquez seulement " + str.tostring(risk) + "% de votre capital sur ce trade."
mess_sellAT = "📉  𝗩𝗘𝗡𝗧𝗘  🔴  " + str.tostring(syminfo.ticker) + "\n \n" + "Prix d'entrée  " + str.tostring(close) + "\n" + "SL  " + str.tostring(atrSell) + " ⛔️ \n" + "TP  " + str.tostring(close-((atrSell-close)*target_stop_ratio)) + " 🎯 \n \n" + "⚠️ Avertissement : Respectez votre money management, risquez seulement " + str.tostring(risk) + "% de votre capital sur ce trade."

mess_buyAP = "" + str.tostring(ID) + ",buy," + str.tostring(syminfo.ticker) + ",sl=" + str.tostring(atrBuy) + ",tp=" + str.tostring(((close-atrBuy)*target_stop_ratio)+close) + ",risk=" + str.tostring(risk) + ""
mess_sellAP = "" + str.tostring(ID) + ",sell," + str.tostring(syminfo.ticker) + ",sl=" + str.tostring(atrSell) + ",tp=" + str.tostring(close-((atrSell-close)*target_stop_ratio)) + ",risk=" + str.tostring(risk) + ""

mess_buyAMT = "📈  𝗔𝗖𝗛𝗔𝗧  🔵  " + str.tostring(syminfo.ticker) + "\n \n" + "Prix d'entrée  " + str.tostring(close) + "\n" + "SL  " + str.tostring(atrBuy) + " ⛔️ \n" + "TP1  " + str.tostring(((close-atrBuy)*target1)+close) + " 🎯 \n" + "TP2  " + str.tostring(((close-atrBuy)*target2)+close) + "🎯 \n \n" + "⚠️ Avertissement : Respectez votre money management, risquez seulement " + str.tostring(risk) + "% de votre capital sur ce trade. BE si TP1 touché"
mess_sellAMT = "📉  𝗩𝗘𝗡𝗧𝗘  🔴  " + str.tostring(syminfo.ticker) + "\n \n" + "Prix d'entrée  " + str.tostring(close) + "\n" + "SL  " + str.tostring(atrSell) + " ⛔️ \n" + "TP1  " + str.tostring(close-((atrSell-close)*target1)) + " 🎯 \n" + "TP2  " + str.tostring(close-((atrSell-close)*target2)) + "🎯 \n \n" + "⚠️ Avertissement : Respectez votre money management, risquez seulement " + str.tostring(risk) + "% de votre capital sur ce trade. BE si TP1 touché"

mess_buyAMP1 = "" + str.tostring(ID) + ",buy," + str.tostring(syminfo.ticker) + ",sl=" + str.tostring(atrBuy) + ",tp=" + str.tostring(((close-atrBuy)*target1)+close) + ",risk=" + str.tostring(risk/2) + ""
mess_buyAMP2 = "" + str.tostring(ID) + ",buy," + str.tostring(syminfo.ticker) + ",sl=" + str.tostring(atrBuy) + ",tp=" + str.tostring(((close-atrBuy)*target2)+close) + ",risk=" + str.tostring(risk/2) + ",betrigger=" + str.tostring(((((close-atrBuy)*target1)+close)-close)/getpips()) + ",beoffset=0"
mess_sellAMP1 = "" + str.tostring(ID) + ",sell," + str.tostring(syminfo.ticker) + ",sl=" + str.tostring(atrSell) + ",tp=" + str.tostring(close-((atrSell-close)*target1)) + ",risk=" + str.tostring(risk/2) + ""
mess_sellAMP2 = "" + str.tostring(ID) + ",sell," + str.tostring(syminfo.ticker) + ",sl=" + str.tostring(atrSell) + ",tp=" + str.tostring(close-((atrSell-close)*target2)) + ",risk=" + str.tostring(risk/2) + ",betrigger=" + str.tostring((close-(close-((atrSell-close)*target1)))/getpips()) + ",beoffset=0"

//這段代碼指示交易軟件進行賣出操作，並提供了交易商品，目標利潤，風險值，以及其他重要參數的信息。
//以下是代碼中每個參數的意義：
//ID 交易單號
//syminfo.ticker:交易商品名稱（例如貨幣對）
//atrSell:交易策略使用的平均真實波幅(ATR)值
//close:交易商品的當前收盤價格
//target2:賣出的目標利潤
//risk:交易的風險值 除以2以計算投資金額
//target1:買入的目標利潤
//getpips:交易商品的價格波動(pips)
//beoffset:交易的保證金偏移量， 設置為0。
//這段代碼指示交易軟件進行賣出操作，並提供了交易商品，目標利潤，風險值，以及其他重要參數的信息。


mess_buyMT = "📈  𝗔𝗖𝗛𝗔𝗧  🔵  " + str.tostring(syminfo.ticker) + "\n \n" + "Prix d'entrée  " + str.tostring(close) + "\n" + "SL  " + str.tostring(swingLow) + " ⛔️ \n" + "TP1  " + str.tostring(((close-swingLow)*target1)+close) + " 🎯 \n" + "TP2  " + str.tostring(((close-swingLow)*target2)+close) + "🎯 \n \n" + "⚠️ Avertissement : Respectez votre money management, risquez seulement " + str.tostring(risk) + "% de votre capital sur ce trade. BE si TP1 touché"                                                                                 
mess_sellMT = "📉  𝗩𝗘𝗡𝗧𝗘  🔴  " + str.tostring(syminfo.ticker) + "\n \n" + "Prix d'entrée  " + str.tostring(close) + "\n" + "SL  " + str.tostring(swingHigh) + " ⛔️ \n" + "TP1  " + str.tostring(close-((swingHigh-close)*target1)) + " 🎯 \n" + "TP2  " + str.tostring(close-((swingHigh-close)*target2)) + "🎯 \n \n" + "⚠️ Avertissement : Respectez votre money management, risquez seulement " + str.tostring(risk) + "% de votre capital sur ce trade. BE si TP1 touché"

mess_buyMP1 = "" + str.tostring(ID) + ",buy," + str.tostring(syminfo.ticker) + ",sl=" + str.tostring(swingLow) + ",tp=" + str.tostring(((close-swingLow)*target1)+close) + ",risk=" + str.tostring(risk/2) + ""
mess_buyMP2 = "" + str.tostring(ID) + ",buy," + str.tostring(syminfo.ticker) + ",sl=" + str.tostring(swingLow) + ",tp=" + str.tostring(((close-swingLow)*target2)+close) + ",risk=" + str.tostring(risk/2) + ",betrigger=" + str.tostring(((((close-swingLow)*target1)+close)-close)/getpips()) + ",beoffset=0"
mess_sellMP1 = "" + str.tostring(ID) + ",sell," + str.tostring(syminfo.ticker) + ",sl=" + str.tostring(swingHigh) + ",tp=" + str.tostring(close-((swingHigh-close)*target1)) + ",risk=" + str.tostring(risk/2) + ""
mess_sellMP2 = "" + str.tostring(ID) + ",sell," + str.tostring(syminfo.ticker) + ",sl=" + str.tostring(swingHigh) + ",tp=" + str.tostring(close-((swingHigh-close)*target2)) + ",risk=" + str.tostring(risk/2) + ",betrigger=" + str.tostring((close-(close-((swingHigh-close)*target1)))/getpips()) + ",beoffset=0"

// Strategy
    
float risk_long = na
float risk_short = na
float stopLoss = na
float takeProfit1 = na
float takeProfit2 = na
float entry_price = na
bool longcondition = na
bool shortcondition = na

if trendA == "Superichi"
    longcondition := buySignal and close > senkouA[26] and senkouA[26] > senkouB[26]
    shortcondition := sellSignal and close < senkouA[26] and senkouA[26] < senkouB[26]
if trendA == "EMA"   
    longcondition := buySignal and close > ema
    shortcondition := sellSignal and close < ema

risk_long := risk_long[1]
risk_short := risk_short[1]

lotB = (strategy.equity*riskt-strategy.equity)/(close - swingLow)
lotS = (strategy.equity*riskt-strategy.equity)/(swingHigh - close)
    
lotB1 = (strategy.equity*riskt-strategy.equity)/(close - atrBuy)
lotS1 = (strategy.equity*riskt-strategy.equity)/(atrSell - close)

if typeSL == "ATR"

    if typeTP == "Multiple Target"
    //該策略是在滿足某些條件時在多個目標上建立多頭頭寸，例如策略的頭寸規模為零、多頭條件為真以及在交易窗口內。 
    //要顯示的通知將取決於變量“tlpc”的值。 如果“tlpc”是“Telegram”  通知消息將是“mess_buyAMT”  如果“tlpc”是“PineConnector”  通知消息將是“mess_buyAMP1”。 此外如果“tlpc”是“PineConnector”
    //將以“alert.freq_once_per_bar_close”的頻率發送消息為“mess_sellAMP2”的警報。
    
        if strategy.position_size == 0 and longcondition and inTradeWindow 
            risk_long := (close - atrBuy) / close
            minp = close - atrBuy
            
            if _x 
                if tlpc == "Telegram" 
                    strategy.entry("long", strategy.long, qty=lotB1, comment="Buy " + str.tostring(close) + "", alert_message = mess_buyAMT, when = minp > security)
                
                if tlpc == "PineConnector" 
                    strategy.entry("long", strategy.long, qty=lotB1, comment="Buy " + str.tostring(close) + "", alert_message = mess_buyAMP1, when = minp > security)
                    alert(mess_sellAMP2, alert.freq_once_per_bar_close)
            else 
                if tlpc == "Telegram" 
                    strategy.entry("long", strategy.long, qty=lotB1, comment="Buy " + str.tostring(close) + "", alert_message = mess_buyAMT)
                
                if tlpc == "PineConnector" 
                    strategy.entry("long", strategy.long, qty=lotB1, comment="Buy " + str.tostring(close) + "", alert_message = mess_buyAMP1)
                    alert(mess_sellAMP2, alert.freq_once_per_bar_close)
        
        if strategy.position_size == 0 and shortcondition and inTradeWindow 
            risk_short := (atrSell - close) / close 
            minp = atrSell - close
            
            if _x 
                if tlpc == "Telegram" 
                    strategy.entry("short", strategy.short, qty=lotS1, comment="Sell " + str.tostring(close) + "", alert_message = mess_sellAMT, when = minp > security)
                    
                if tlpc == "PineConnector" 
                    strategy.entry("short", strategy.short, qty=lotS1, comment="Sell " + str.tostring(close) + "", alert_message = mess_sellAMP1, when = minp > security)
                    alert(mess_sellAMP2, alert.freq_once_per_bar_close)
            else 
                if tlpc == "Telegram" 
                    strategy.entry("short", strategy.short, qty=lotS1, comment="Sell " + str.tostring(close) + "", alert_message = mess_sellAMT)
                    
                if tlpc == "PineConnector" 
                    strategy.entry("short", strategy.short, qty=lotS1, comment="Sell " + str.tostring(close) + "", alert_message = mess_sellAMP1)
                    alert(mess_sellAMP2, alert.freq_once_per_bar_close)
    
    if typeTP == "R:R"
    
        if strategy.position_size == 0 and longcondition and inTradeWindow 
            risk_long := (close - atrBuy) / close
            minp = close - atrBuy
            
            if _x 
                if tlpc == "Telegram" 
                    strategy.entry("long", strategy.long, qty=lotB1, comment="Buy " + str.tostring(close) + "", alert_message = mess_buyAT, when = minp > security)
                
                if tlpc == "PineConnector" 
                    strategy.entry("long", strategy.long, qty=lotB1, comment="Buy " + str.tostring(close) + "", alert_message = mess_buyAP, when = minp > security)
            else 
                if tlpc == "Telegram" 
                    strategy.entry("long", strategy.long, qty=lotB1, comment="Buy " + str.tostring(close) + "", alert_message = mess_buyAT)
                
                if tlpc == "PineConnector" 
                    strategy.entry("long", strategy.long, qty=lotB1, comment="Buy " + str.tostring(close) + "", alert_message = mess_buyAP)
        
        if strategy.position_size == 0 and shortcondition and inTradeWindow 
            risk_short := (atrSell - close) / close 
            minp = atrSell - close
         
            if _x 
                if tlpc == "Telegram" 
                    strategy.entry("short", strategy.short, qty=lotS1, comment="Sell " + str.tostring(close) + "", alert_message = mess_sellAT, when = minp > security)
                    
                if tlpc == "PineConnector" 
                    strategy.entry("short", strategy.short, qty=lotS1, comment="Sell " + str.tostring(close) + "", alert_message = mess_sellAP, when = minp > security)
            else 
                if tlpc == "Telegram" 
                    strategy.entry("short", strategy.short, qty=lotS1, comment="Sell " + str.tostring(close) + "", alert_message = mess_sellAT)
                    
                if tlpc == "PineConnector" 
                    strategy.entry("short", strategy.short, qty=lotS1, comment="Sell " + str.tostring(close) + "", alert_message = mess_sellAP)
    
if typeSL == "Swing"

    if typeTP == "Multiple Target"
    
        if strategy.position_size == 0 and longcondition and inTradeWindow 
            risk_long := (close - swingLow) / close
            minp = close - swingLow
            
            if _x 
                if tlpc == "Telegram" 
                    strategy.entry("long", strategy.long, qty=lotB, comment="Buy " + str.tostring(close) + "", alert_message = mess_buyMT, when = minp > security)
                    
                if tlpc == "PineConnector" 
                    strategy.entry("long", strategy.long, qty=lotB, comment="Buy " + str.tostring(close) + "", alert_message = mess_buyMP1, when = minp > security)
                    alert(mess_buyMP2, alert.freq_once_per_bar_close)
            else 
                if tlpc == "Telegram" 
                    strategy.entry("long", strategy.long, qty=lotB, comment="Buy " + str.tostring(close) + "", alert_message = mess_buyMT)
                    
                if tlpc == "PineConnector" 
                    strategy.entry("long", strategy.long, qty=lotB, comment="Buy " + str.tostring(close) + "", alert_message = mess_buyMP1)
                    alert(mess_buyMP2, alert.freq_once_per_bar_close)
       
        if strategy.position_size == 0 and shortcondition and inTradeWindow 
            risk_short := (swingHigh - close) / close  
            minp = swingHigh - close
            
            if _x 
                if tlpc == "Telegram" 
                    strategy.entry("short", strategy.short, qty=lotS, comment="Sell " + str.tostring(close) + "", alert_message = mess_sellMT, when = minp > security)
                        
                if tlpc == "PineConnector" 
                    strategy.entry("short", strategy.short, qty=lotS, comment="Sell " + str.tostring(close) + "", alert_message = mess_sellMP1, when = minp > security)
                    alert(mess_sellMP2, alert.freq_once_per_bar_close)
            else 
                if tlpc == "Telegram" 
                    strategy.entry("short", strategy.short, qty=lotS, comment="Sell " + str.tostring(close) + "", alert_message = mess_sellMT)
                        
                if tlpc == "PineConnector" 
                    strategy.entry("short", strategy.short, qty=lotS, comment="Sell " + str.tostring(close) + "", alert_message = mess_sellMP1)
                    alert(mess_sellMP2, alert.freq_once_per_bar_close)
                    
    if typeTP == "R:R"

        if strategy.position_size == 0 and longcondition and inTradeWindow 
            risk_long := (close - swingLow) / close
            minp = close - swingLow
        
            if _x 
                if tlpc == "Telegram" 
                    strategy.entry("long", strategy.long, qty=lotB, comment="Buy " + str.tostring(close) + "", alert_message = mess_buyT, when = minp > security)
                    
                if tlpc == "PineConnector" 
                    strategy.entry("long", strategy.long, qty=lotB, comment="Buy " + str.tostring(close) + "", alert_message = mess_buyP, when = minp > security)
            else 
                if tlpc == "Telegram" 
                    strategy.entry("long", strategy.long, qty=lotB, comment="Buy " + str.tostring(close) + "", alert_message = mess_buyT)
                    
                if tlpc == "PineConnector" 
                    strategy.entry("long", strategy.long, qty=lotB, comment="Buy " + str.tostring(close) + "", alert_message = mess_buyP)
       
        if strategy.position_size == 0 and shortcondition and inTradeWindow 
            risk_short := (swingHigh - close) / close  
            minp = swingHigh - close
  
            if _x 
                if tlpc == "Telegram" 
                    strategy.entry("short", strategy.short, qty=lotS, comment="Sell " + str.tostring(close) + "", alert_message = mess_sellT, when = minp > security)
                        
                if tlpc == "PineConnector" 
                    strategy.entry("short", strategy.short, qty=lotS, comment="Sell " + str.tostring(close) + "", alert_message = mess_sellP, when = minp > security)
            else 
                if tlpc == "Telegram" 
                    strategy.entry("short", strategy.short, qty=lotS, comment="Sell " + str.tostring(close) + "", alert_message = mess_sellT)
                        
                if tlpc == "PineConnector" 
                    strategy.entry("short", strategy.short, qty=lotS, comment="Sell " + str.tostring(close) + "", alert_message = mess_sellP)
    
if typeTP == "Multiple Target"

    if tlpc == "Telegram" 
    
        if strategy.position_size > 0
    
            stopLoss := strategy.position_avg_price * (1 - risk_long)
            takeProfit1 := strategy.position_avg_price * (1 + target1 * risk_long)
            takeProfit2 := strategy.position_avg_price * (1 + target2 * risk_long)
            entry_price := strategy.position_avg_price
            mess_profit1 = "📈  𝗔𝗖𝗛𝗔𝗧  🔵  " + str.tostring(syminfo.ticker) + "\n" + "TP1 Touché ✅ +" + str.tostring(risk*target1) + "% " 
            strategy.exit("Exit 1", "long", limit = takeProfit1, qty_percent=50, comment_profit = "TP1 ✅", alert_profit = mess_profit1)
            
            if ta.crossover(high, takeProfit1)
                mess_profit2 = "📈  𝗔𝗖𝗛𝗔𝗧  🔵  " + str.tostring(syminfo.ticker) + "\n" + "TP2 Touché ✅ +" + str.tostring(risk*target2) + "% " 
                mess_be = "📈  𝗔𝗖𝗛𝗔𝗧  🔵  " + str.tostring(syminfo.ticker) + "\n" + "BE ❎"
                strategy.exit("Exit 2", "long", stop = entry_price, limit = takeProfit2, qty_percent = 100, comment_profit = "TP2 ✅", comment_loss = "BE ❎", alert_profit = mess_profit2)
            else 
                mess_loss = "📈  𝗔𝗖𝗛𝗔𝗧  🔵  " + str.tostring(syminfo.ticker) + "\n" + "SL Touché ❌ -" + str.tostring(risk) + "% " 
                strategy.exit("Exit 1", "long", stop = stopLoss, qty_percent = 100, comment_loss = "SL ❌", alert_loss = mess_loss)
        
        if strategy.position_size < 0
    
            stopLoss := strategy.position_avg_price * (1 + risk_short)
            takeProfit1 := strategy.position_avg_price * (1 - target1 * risk_short)
            takeProfit2 := strategy.position_avg_price * (1 - target2 * risk_short)
            entry_price := strategy.position_avg_price
            mess_profit1 = "📉  𝗩𝗘𝗡𝗧𝗘  🔴  " + str.tostring(syminfo.ticker) + "\n" + "TP1 Touché ✅ +" + str.tostring(risk*target1) + "% " 
            strategy.exit("Exit 1", "short", limit = takeProfit1, qty_percent = 50, comment_profit = "TP1 ✅", alert_profit = mess_profit1)
            
            if ta.crossunder(low, takeProfit1)
                mess_profit2 = "📉  𝗩𝗘𝗡𝗧𝗘  🔴  " + str.tostring(syminfo.ticker) + "\n" + "TP2 Touché ✅ +" + str.tostring(risk*target2) + "% " 
                mess_be = "📉  𝗩𝗘𝗡𝗧𝗘  🔴  " + str.tostring(syminfo.ticker) + "\n" + "BE ❎"
                strategy.exit("Exit 2", "short", stop = entry_price, limit = takeProfit2, qty_percent = 100, comment_profit = "TP2 ✅", comment_loss = "BE ❎", alert_profit = mess_profit2)
            else 
                mess_loss = "📉  𝗩𝗘𝗡𝗧𝗘  🔴  " + str.tostring(syminfo.ticker) + "\n" + "SL Touché ❌ -" + str.tostring(risk) + "% " 
                strategy.exit("Exit 1", "short", stop = stopLoss, qty_percent = 100, comment_loss = "SL ❌", alert_loss = mess_loss)
                
    if tlpc == "PineConnector" 
        
        if strategy.position_size > 0

            stopLoss := strategy.position_avg_price * (1 - risk_long)
            takeProfit1 := strategy.position_avg_price * (1 + target1 * risk_long)
            takeProfit2 := strategy.position_avg_price * (1 + target2 * risk_long)
            entry_price := strategy.position_avg_price
            strategy.exit("Exit 1", "long", limit = takeProfit1, qty_percent=50, comment_profit = "TP1 ✅")
            
            if ta.crossover(high, takeProfit1)
                strategy.exit("Exit 2", "long", stop = entry_price, limit = takeProfit2, qty_percent = 100, comment_profit = "TP2 ✅", comment_loss = "BE ❎")
            else 
                strategy.exit("Exit 1", "long", stop = stopLoss, qty_percent = 100, comment_loss = "SL ❌")
    
        if strategy.position_size < 0
    
            stopLoss := strategy.position_avg_price * (1 + risk_short)
            takeProfit1 := strategy.position_avg_price * (1 - target1 * risk_short)
            takeProfit2 := strategy.position_avg_price * (1 - target2 * risk_short)
            entry_price := strategy.position_avg_price
            strategy.exit("Exit 1", "short", limit = takeProfit1, qty_percent = 50, comment_profit = "TP1 ✅")
            
            if ta.crossunder(low, takeProfit1)
                strategy.exit("Exit 2", "short", stop = entry_price, limit = takeProfit2, qty_percent = 100, comment_profit = "TP2 ✅", comment_loss = "BE ❎")
            else 
                strategy.exit("Exit 1", "short", stop = stopLoss, qty_percent = 100, comment_loss = "SL ❌")
            
if typeTP == "R:R"

    if strategy.position_size > 0

        stopLoss := strategy.position_avg_price * (1 - risk_long)
        takeProfit1 := strategy.position_avg_price * (1 + target_stop_ratio * risk_long)
        entry_price := strategy.position_avg_price
        
        if tlpc == "Telegram" 
            mess_profit = "📈  𝗔𝗖𝗛𝗔𝗧  🔵  " + str.tostring(syminfo.ticker) + "\n" + "TP Touché ✅ +" + str.tostring(risk*target_stop_ratio) + "% " 
            mess_loss = "📈  𝗔𝗖𝗛𝗔𝗧  🔵  " + str.tostring(syminfo.ticker) + "\n" + "SL Touché ❌ -" + str.tostring(risk) + "% " 
            strategy.exit("Exit long", "long", stop = stopLoss, limit = takeProfit1, comment_profit="TP ✅", comment_loss="SL ❌", alert_profit = mess_profit, alert_loss = mess_loss)
        
        if tlpc == "PineConnector" 
            strategy.exit("Exit long", "long", stop = stopLoss, limit = takeProfit1, comment_profit="TP ✅", comment_loss="SL ❌")
            
    if strategy.position_size < 0

        stopLoss := strategy.position_avg_price * (1 + risk_short) 
        takeProfit1 := strategy.position_avg_price * (1 - target_stop_ratio * risk_short) 
        entry_price := strategy.position_avg_price
        
        if tlpc == "Telegram" 
            mess_profit = "📉  𝗩𝗘𝗡𝗧𝗘  🔴  " + str.tostring(syminfo.ticker) + "\n" + "TP Touché ✅ +" + str.tostring(risk*target_stop_ratio) + "% " 
            mess_loss = "📉  𝗩𝗘𝗡𝗧𝗘  🔴  " + str.tostring(syminfo.ticker) + "\n" + "SL Touché ❌ -" + str.tostring(risk) + "% " 
            strategy.exit("Exit short", "short", stop = stopLoss, limit = takeProfit1, comment_profit="TP ✅" , comment_loss="SL ❌", alert_profit = mess_profit, alert_loss = mess_loss)           
            
        if tlpc == "PineConnector" 
            strategy.exit("Exit short", "short", stop = stopLoss, limit = takeProfit1, comment_profit="TP ✅" , comment_loss="SL ❌")         
        
//plot

trendema = trendA == "EMA" ? ema : na
plot(trendema, title="EMA", color=color.white, linewidth=2)

trendsuperA = trendA == "Superichi" ? senkouA : na 
trendsuperB = trendA == "Superichi" ? senkouB : na 
A = plot(trendsuperA,'Senkou Span A', na, offset=offset-1)
B = plot(trendsuperB,'Senkou Span B', na, offset=offset-1)
fill(A,B,senkouA > senkouB ? cloud_a : cloud_b)

plotshape(showArrows and buySignal ? atrLow : na, title='Arrow Up', style=shape.triangleup, location=location.absolute, size=size.tiny, color=color.new(buyColor, 0))
plotshape(showArrows and sellSignal ? atrHigh : na, title='Arrow Down', style=shape.triangledown, location=location.absolute, size=size.tiny, color=color.new(sellColor, 0))

exswingH = typeSL == "Swing" ? swingHigh : na
exswingL = typeSL == "Swing" ? swingLow : na
plot(exswingH, color=color.new(color.white, 60), style=plot.style_cross, title='Swing High')
plot(exswingL, color=color.new(color.white, 60), style=plot.style_cross, title='Swing Low')

exatrS = typeSL == "ATR" ? atrSell : na
exatrB = typeSL == "ATR" ? atrBuy : na
plot(exatrS, color=color.new(color.white, 60), title='ATR')
plot(exatrB, color=color.new(color.white, 60), title='ATR')

p_ep = plot(entry_price, color=color.new(color.white, 0), linewidth=2, style=plot.style_linebr, title='entry price')
p_sl = plot(stopLoss, color=color.new(color.red, 0), linewidth=2, style=plot.style_linebr, title='stopLoss')
p_tp2 = plot(takeProfit2, color=color.new(color.green, 0), linewidth=2, style=plot.style_linebr, title='takeProfit1')
p_tp1 = plot(takeProfit1, color=color.new(#52F071, 0), linewidth=1, style=plot.style_linebr, title='takeProfit2')
fill(p_sl, p_ep, color.new(color.red, transp=85))
fill(p_tp2, p_ep, color.new(color.green, transp=85))
fill(p_tp1, p_ep, color.new(#52F071, transp=85))

colorresult = strategy.netprofit > 0 ? color.green : color.red	
profitprc = strategy.netprofit / strategy.initial_capital * 100
periodzone = (backtestEndDate - backtestStartDate) / 3600 / 24 / 1000

var tbl = table.new(position.top_right, 4, 2, border_width=3)

table.cell(tbl, 0, 0, "Symbole",  bgcolor = #9B9B9B, width = 6, height = 6)
table.cell(tbl, 1, 0, "Net Profit", bgcolor = #9B9B9B, width = 6, height = 6)
table.cell(tbl, 2, 0, "Trades", bgcolor = #9B9B9B, width = 6, height = 6)
table.cell(tbl, 3, 0, "Period",  bgcolor = #9B9B9B, width = 6, height = 6)
    
table.cell(tbl, 0, 1, str.tostring(syminfo.ticker),  bgcolor = #E8E8E8, width = 6, height = 6)
table.cell(tbl, 1, 1, str.tostring(profitprc, format.mintick) + " %", bgcolor = colorresult,   width = 6, height = 6)
table.cell(tbl, 2, 1, str.tostring(strategy.closedtrades), bgcolor = colorresult,   width = 6, height = 6)
table.cell(tbl, 3, 1, str.tostring(periodzone) + " day", bgcolor = colorresult,   width = 6, height = 6)
